{"ast":null,"code":"import _objectSpread from \"/Users/coderdojo/coder-dojo/new/movie-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/coderdojo/coder-dojo/new/movie-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/coderdojo/coder-dojo/new/movie-project/src/components/Deck.js\";\nimport React, { useState } from \"react\";\nimport { useSprings } from \"react-spring/hooks\";\nimport { useGesture } from \"react-with-gesture\";\nimport Card from \"./Card\";\nimport data from \"../data.js\";\nimport \"../styles/Deck.css\";\nvar test = new Set();\n\nfunction left(data) {}\n\n;\n\nfunction right(i) {\n  genres = cards[i].props.data[i].genre;\n  genres.forEach(function (genre) {\n    return alert(genre);\n  });\n  test.add(i);\n}\n\nvar to = function to(i) {\n  return {\n    x: 0,\n    y: i * -10,\n    scale: 1,\n    rot: -10 + Math.random() * 20,\n    delay: i * 100\n  };\n};\n\nvar from = function from(i) {\n  return {\n    rot: 0,\n    scale: 1.5,\n    y: -1000\n  };\n};\n\nvar trans = function trans(r, s) {\n  return \"perspective(1500px) rotateX(30deg) rotateY(\".concat(r / 10, \"deg) rotateZ(\").concat(r, \"deg) scale(\").concat(s, \")\");\n};\n/*\nfunction findMaxOccurence(arr){\n  let action = 0\n  let adventure = 0\n  let sciFi = 0\n  let comedy = 0\n  let drama = 0\n\n  arr.forEach(movie =>\n    movie.forEach(i =>\n      if (i === \"action\"){\n\n      }\n    )\n    )\n}\n*/\n\n\nfunction Deck() {\n  var _useState = useState(function () {\n    return new Set();\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      gone = _useState2[0];\n\n  var _useSprings = useSprings(data.length, function (i) {\n    return _objectSpread({}, to(i), {\n      from: from(i)\n    });\n  }),\n      _useSprings2 = _slicedToArray(_useSprings, 2),\n      props = _useSprings2[0],\n      set = _useSprings2[1];\n\n  var bind = useGesture(function (_ref) {\n    var _ref$args = _slicedToArray(_ref.args, 1),\n        index = _ref$args[0],\n        down = _ref.down,\n        _ref$delta = _slicedToArray(_ref.delta, 1),\n        xDelta = _ref$delta[0],\n        distance = _ref.distance,\n        _ref$direction = _slicedToArray(_ref.direction, 1),\n        xDir = _ref$direction[0],\n        velocity = _ref.velocity;\n\n    var trigger = velocity > 0.2;\n    var dir = xDir < 0 ? -1 : 1;\n\n    if (!down && trigger) {\n      dir === -1 ? left(index) : right(index);\n      gone.add(index);\n    }\n\n    set(function (i) {\n      if (index !== i) return;\n      var isGone = gone.has(index);\n      var x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n      var rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n      var scale = down ? 1.1 : 1;\n      return {\n        x: x,\n        rot: rot,\n        scale: scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n\n    if (!down && gone.size === data.length) {\n      console.log(test);\n      test.forEach(function (i) {\n        return alert(cards[i].props.data[i].genre);\n      }); //alert(max(test))\n      //alert(cards[1].props.data[1].name);\n      //setTimeout(() => gone.clear() || set(i => to(i)), 600);\n    }\n  });\n  var cards = props.map(function (_ref2, i) {\n    var x = _ref2.x,\n        y = _ref2.y,\n        rot = _ref2.rot,\n        scale = _ref2.scale,\n        name = _ref2.name;\n    return React.createElement(Card, {\n      i: i,\n      x: x,\n      y: y,\n      rot: rot,\n      scale: scale,\n      trans: trans,\n      data: data,\n      bind: bind,\n      name: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    });\n  }); //alert(cards[1].props.data[1].name);\n\n  console.log(\"gone\");\n  console.log(gone);\n  console.log(\"test\");\n  console.log(test);\n  return cards;\n}\n\nexport default Deck;\nconsole.log(\"I GOT HERE\");","map":{"version":3,"sources":["/Users/coderdojo/coder-dojo/new/movie-project/src/components/Deck.js"],"names":["React","useState","useSprings","useGesture","Card","data","test","Set","left","right","i","genres","cards","props","genre","forEach","alert","add","to","x","y","scale","rot","Math","random","delay","from","trans","r","s","Deck","gone","length","set","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","isGone","has","window","innerWidth","undefined","config","friction","tension","size","console","log","map","name"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useSprings } from \"react-spring/hooks\";\nimport { useGesture } from \"react-with-gesture\";\n\nimport Card from \"./Card\";\nimport data from \"../data.js\";\n\nimport \"../styles/Deck.css\";\nconst test = new Set();\nfunction left(data){};\nfunction right(i){\n  genres = cards[i].props.data[i].genre\n  genres.forEach(genre =>\n    alert(genre)\n    )\n  test.add(i)\n}\nconst to = i => ({\n  x: 0,\n  y: i * -10,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 });\n\nconst trans = (r, s) =>\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\n    10}deg) rotateZ(${r}deg) scale(${s})`;\n/*\nfunction findMaxOccurence(arr){\n  let action = 0\n  let adventure = 0\n  let sciFi = 0\n  let comedy = 0\n  let drama = 0\n\n  arr.forEach(movie =>\n    movie.forEach(i =>\n      if (i === \"action\"){\n\n      }\n    )\n    )\n}\n*/\n\nfunction Deck() {\n  const [gone] = useState(() => new Set());\n\n  const [props, set] = useSprings(data.length, i => ({\n    ...to(i),\n    from: from(i)\n  }));\n\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      const trigger = velocity > 0.2;\n\n      const dir = xDir < 0 ? -1 : 1;\n\n      if (!down && trigger){\n        dir === -1 ? left(index) : right(index);\n        gone.add(index);\n      }\n      set(i => {\n        if (index !== i) return;\n        const isGone = gone.has(index);\n\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n\n        const scale = down ? 1.1 : 1;\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n\n      if (!down && gone.size === data.length){\n        console.log(test)\n        test.forEach(i => alert(cards[i].props.data[i].genre))\n        //alert(max(test))\n        //alert(cards[1].props.data[1].name);\n        //setTimeout(() => gone.clear() || set(i => to(i)), 600);\n\n    }}\n  );\n\n  var cards = props.map(({ x, y, rot, scale, name }, i) => (\n    <Card\n      i={i}\n      x={x}\n      y={y}\n      rot={rot}\n      scale={scale}\n      trans={trans}\n      data={data}\n      bind={bind}\n      name={name}\n    />),\n    \n  \n  );\n  \n  //alert(cards[1].props.data[1].name);\n  console.log(\"gone\")\n  console.log(gone)\n  console.log(\"test\")\n  console.log(test)\n  return cards;\n}\n\nexport default Deck;\nconsole.log(\"I GOT HERE\")\n"]},"metadata":{},"sourceType":"module"}