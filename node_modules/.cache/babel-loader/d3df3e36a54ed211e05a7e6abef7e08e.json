{"ast":null,"code":"import _objectSpread from \"/Users/coderdojo/coder-dojo/new/movie-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/coderdojo/coder-dojo/new/movie-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/coderdojo/coder-dojo/new/movie-project/src/components/Deck.js\";\nimport React, { useState } from \"react\";\nimport { useSprings } from \"react-spring/hooks\";\nimport { useGesture } from \"react-with-gesture\"; //var Spinner = require('react-spinkit');\n\nimport Spinner from \"react-spinkit\";\nimport ReactDOM from \"react-dom\";\nimport Card from \"./Card\";\nimport data from \"../kidsMovies\";\nimport \"../styles/Deck.css\";\nvar finish = false;\nvar test = new Set();\n\nfunction left(data) {}\n\n;\n\nfunction right(i, cards) {\n  var genres = cards[i].props.data[i].genre;\n  genres.forEach(function (genre) {\n    return (//test.add(genre)\n      keepScore(genre)\n    );\n  });\n}\n\nvar to = function to(i) {\n  return {\n    x: 0,\n    y: i * -10,\n    scale: 1,\n    rot: -10 + Math.random() * 20,\n    delay: i * 100\n  };\n};\n\nvar from = function from(i) {\n  return {\n    rot: 0,\n    scale: 1.5,\n    y: -1000\n  };\n};\n\nvar trans = function trans(r, s) {\n  return \"perspective(1500px) rotateX(30deg) rotateY(\".concat(r / 10, \"deg) rotateZ(\").concat(r, \"deg) scale(\").concat(s, \")\");\n};\n\nvar scores = {\n  'Action': 0,\n  'Adventure': 0,\n  'Fantasy': 0,\n  'Comedy': 0,\n  'Drama': 0\n};\nvar movieRecs = {\n  'Action': ['The Incredibles'],\n  'Adventure': ['The Jungle Book', 'The Lego Movie', 'Zootopia', 'Finding Dory'],\n  'Fantasy': ['The Chronicles of Narnia'],\n  'Comedy': ['Ice Age'],\n  'Drama': ['Free Willy']\n};\n\nfunction keepScore(genre) {\n  if (genre === 'Action') {\n    scores['Action'] = scores['Action'] + 1;\n  }\n\n  if (genre === 'Adventure') {\n    scores['Adventure'] = scores['Adventure'] + 1;\n  }\n\n  if (genre === 'Fantasy') {\n    scores['Fantasy'] = scores['Fantasy'] + 1;\n  }\n\n  if (genre === 'Comedy') {\n    scores['Comedy'] = scores['Comedy'] + 1;\n  }\n\n  if (genre === 'Drama') {\n    scores['Drama'] = scores['Drama'] + 1;\n  }\n}\n\nfunction releaseScore() {\n  var totalScores = 0;\n  var maxGenre = \"\";\n  var max = 0;\n  var secondBest = \"\";\n  var secondMax = \"\";\n\n  for (var key in scores) {\n    totalScores = totalScores + scores[key];\n\n    if (scores[key] > max) {\n      maxGenre = key;\n      max = scores[key];\n    }\n  }\n\n  for (var seckey in scores) {\n    if (scores[seckey] > secondMax && seckey !== maxGenre) {\n      secondBest = seckey;\n      secondMax = scores[seckey];\n    }\n  }\n\n  var movieRec;\n  var ranNum = Math.floor(Math.random() * 3 + 0);\n  var movieRecGenre = movieRecs[maxGenre];\n\n  if (maxGenre === \"Adventure\") {\n    movieRec = movieRecGenre[ranNum];\n  } else {\n    movieRec = movieRecGenre[0];\n  }\n\n  max = parseInt(max * 100 / totalScores);\n  secondMax = parseInt(secondMax * 100 / totalScores);\n  var stringMsg = \"<h4>Your favourite Genre: \" + maxGenre + \" (\" + max + \"% Match), but you also like \" + secondBest + \" (\" + secondMax + \"% Match)</h4><h4> A movie you would enjoy: \" + movieRec + \"</h4>\"; //alert(stringMsg)\n  //const result = () => stringMsg;\n\n  return stringMsg; //alert(stringMsg)\n}\n\nfunction showResult(score) {\n  document.getElementById(\"resultText\").innerHTML = score;\n  document.getElementById(\"root\").style.visibility = \"hidden\";\n  document.getElementById(\"spin\").style.display = \"none\";\n  document.getElementById(\"result\").style.display = \"block\";\n}\n\nfunction Deck() {\n  var score;\n  var returnVal;\n\n  var _useState = useState(function () {\n    return new Set();\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      gone = _useState2[0];\n\n  var _useSprings = useSprings(data.length, function (i) {\n    return _objectSpread({}, to(i), {\n      from: from(i)\n    });\n  }),\n      _useSprings2 = _slicedToArray(_useSprings, 2),\n      props = _useSprings2[0],\n      set = _useSprings2[1];\n\n  var bind = useGesture(function (_ref) {\n    var _ref$args = _slicedToArray(_ref.args, 1),\n        index = _ref$args[0],\n        down = _ref.down,\n        _ref$delta = _slicedToArray(_ref.delta, 1),\n        xDelta = _ref$delta[0],\n        distance = _ref.distance,\n        _ref$direction = _slicedToArray(_ref.direction, 1),\n        xDir = _ref$direction[0],\n        velocity = _ref.velocity;\n\n    var trigger = velocity > 0.2;\n    var dir = xDir < 0 ? -1 : 1;\n\n    if (!down && trigger) {\n      dir === -1 ? left(index) : right(index, cards);\n      gone.add(index);\n    }\n\n    set(function (i) {\n      if (index !== i) return;\n      var isGone = gone.has(index);\n      var x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n      var rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n      var scale = down ? 1.1 : 1;\n      return {\n        x: x,\n        rot: rot,\n        scale: scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n\n    if (!down && gone.size === data.length) {\n      var spin = React.createElement(Spinner, {\n        name: \"line-scale-party\",\n        color: \"#f38b00\",\n        fadeIn: \"half\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      });\n      document.getElementById(\"root\").style.visibility = \"hidden\";\n      document.getElementById(\"green-thumb\").style.display = \"none\";\n      document.getElementById(\"red-thumb\").style.display = \"none\";\n      ReactDOM.render(spin, document.getElementById(\"spinner\"));\n      document.getElementById(\"spin\").style.display = \"block\";\n      score = releaseScore(); //setTimeout(showResult(score), 60000);\n\n      setTimeout(function () {\n        return showResult(score);\n      }, 4000); //alert(popular)\n      //setTimeout(() => gone.clear() || set(i => to(i)), 600);\n    }\n  });\n  var cards = props.map(function (_ref2, i) {\n    var x = _ref2.x,\n        y = _ref2.y,\n        rot = _ref2.rot,\n        scale = _ref2.scale,\n        name = _ref2.name;\n    return React.createElement(Card, {\n      i: i,\n      x: x,\n      y: y,\n      rot: rot,\n      scale: scale,\n      trans: trans,\n      data: data,\n      bind: bind,\n      name: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    });\n  }); //alert(cards[1].props.data[1].name);\n\n  console.log(\"gone\");\n  console.log(gone);\n  console.log(\"test\");\n  console.log(test);\n\n  if (finish === true) {\n    alert(score);\n    returnVal = \"hi\";\n  } else {\n    returnVal = cards;\n  }\n\n  return returnVal;\n}\n\nexport default Deck;\nconsole.log(\"I GOT HERE\");","map":{"version":3,"sources":["/Users/coderdojo/coder-dojo/new/movie-project/src/components/Deck.js"],"names":["React","useState","useSprings","useGesture","Spinner","ReactDOM","Card","data","finish","test","Set","left","right","i","cards","genres","props","genre","forEach","keepScore","to","x","y","scale","rot","Math","random","delay","from","trans","r","s","scores","movieRecs","releaseScore","totalScores","maxGenre","max","secondBest","secondMax","key","seckey","movieRec","ranNum","floor","movieRecGenre","parseInt","stringMsg","showResult","score","document","getElementById","innerHTML","style","visibility","display","Deck","returnVal","gone","length","set","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","spin","render","setTimeout","map","name","console","log","alert"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useSprings } from \"react-spring/hooks\";\nimport { useGesture } from \"react-with-gesture\";\n//var Spinner = require('react-spinkit');\nimport Spinner from \"react-spinkit\";\nimport ReactDOM from \"react-dom\";\n\nimport Card from \"./Card\";\nimport data from \"../kidsMovies\";\nimport \"../styles/Deck.css\";\nlet finish = false\nconst test = new Set();\nfunction left(data){};\nfunction right(i, cards){\n  let genres = cards[i].props.data[i].genre\n  genres.forEach(genre =>\n    //test.add(genre)\n    keepScore(genre)\n  )\n  \n}\nconst to = i => ({\n  x: 0,\n  y: i * -10,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 });\n\nconst trans = (r, s) =>\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\n    10}deg) rotateZ(${r}deg) scale(${s})`;\n\nlet scores = {'Action':0,'Adventure':0,'Fantasy':0,'Comedy':0,'Drama':0}\nlet movieRecs = {'Action': ['The Incredibles'], 'Adventure': ['The Jungle Book', 'The Lego Movie', 'Zootopia', 'Finding Dory'], 'Fantasy': ['The Chronicles of Narnia'], 'Comedy':['Ice Age'], 'Drama':['Free Willy']}\n\nfunction keepScore(genre){\n  if (genre === 'Action'){\n    scores['Action'] = scores['Action'] + 1\n  }\n  if (genre === 'Adventure'){\n    scores['Adventure'] = scores['Adventure'] + 1\n  }\n  if (genre === 'Fantasy'){\n    scores['Fantasy'] = scores['Fantasy'] + 1\n  }\n  if (genre === 'Comedy'){\n    scores['Comedy'] = scores['Comedy'] + 1\n  }\n  if (genre === 'Drama'){\n    scores['Drama'] = scores['Drama'] + 1\n  }\n}\n\nfunction releaseScore(){\n  let totalScores = 0\n  let maxGenre = \"\"\n  let max = 0\n  let secondBest = \"\"\n  let secondMax = \"\"\n  for (var key in scores){\n    totalScores = totalScores + scores[key]\n    if (scores[key] > max){\n      maxGenre = key\n      max = scores[key]\n    }\n  }\n\n  for (var seckey in scores){\n    if (scores[seckey] > secondMax && seckey !== maxGenre){\n      secondBest = seckey\n      secondMax = scores[seckey]\n    }\n  }\n\n  var movieRec\n  let ranNum = Math.floor((Math.random() * 3) + 0)\n  let movieRecGenre = movieRecs[maxGenre]\n  if (maxGenre === \"Adventure\"){\n    movieRec = movieRecGenre[ranNum]\n  }\n  else{\n    movieRec = movieRecGenre[0]\n  }\n\n\n  max = parseInt((max*100)/totalScores)\n  secondMax = parseInt((secondMax*100)/totalScores)\n\n  let stringMsg = \"<h4>Your favourite Genre: \" + maxGenre + \" (\" + max + \"% Match), but you also like \" + secondBest + \" (\" + secondMax + \"% Match)</h4><h4> A movie you would enjoy: \" + movieRec + \"</h4>\"\n  //alert(stringMsg)\n  //const result = () => stringMsg;\n  return stringMsg\n  //alert(stringMsg)\n}\n\nfunction showResult(score){\n  document.getElementById(\"resultText\").innerHTML = score\n  document.getElementById(\"root\").style.visibility = \"hidden\";\n  document.getElementById(\"spin\").style.display = \"none\";\n  document.getElementById(\"result\").style.display = \"block\";\n}\n\nfunction Deck() {\n  var score;\n  var returnVal;\n  const [gone] = useState(() => new Set());\n\n  const [props, set] = useSprings(data.length, i => ({\n    ...to(i),\n    from: from(i)\n  }));\n\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      const trigger = velocity > 0.2;\n\n      const dir = xDir < 0 ? -1 : 1;\n\n      if (!down && trigger){\n        dir === -1 ? left(index) : right(index, cards);\n        gone.add(index);\n      }\n      set(i => {\n        if (index !== i) return;\n        const isGone = gone.has(index);\n\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n\n        const scale = down ? 1.1 : 1;\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n\n      if (!down && gone.size === data.length){\n        let spin = <Spinner name=\"line-scale-party\" color=\"#f38b00\" fadeIn=\"half\"/>\n        document.getElementById(\"root\").style.visibility = \"hidden\";\n        document.getElementById(\"green-thumb\").style.display = \"none\";\n        document.getElementById(\"red-thumb\").style.display = \"none\";\n        ReactDOM.render(spin, document.getElementById(\"spinner\"));\n        document.getElementById(\"spin\").style.display = \"block\";\n        score = releaseScore();\n        //setTimeout(showResult(score), 60000);\n        setTimeout(() => showResult(score), 4000);\n        //alert(popular)\n        //setTimeout(() => gone.clear() || set(i => to(i)), 600);\n\n    }}\n  \n  );\n\n  var cards = props.map(({ x, y, rot, scale, name }, i) => (\n    <Card\n      i={i}\n      x={x}\n      y={y}\n      rot={rot}\n      scale={scale}\n      trans={trans}\n      data={data}\n      bind={bind}\n      name={name}\n    />),\n    \n  \n  );\n  \n  //alert(cards[1].props.data[1].name);\n  console.log(\"gone\")\n  console.log(gone)\n  console.log(\"test\")\n  console.log(test)\n  \n  if (finish === true){\n    alert(score)\n    returnVal = \"hi\"\n  }\n  else{\n    returnVal = cards\n  }\n  return returnVal;\n  \n  \n}\n\n\n\nexport default Deck;\nconsole.log(\"I GOT HERE\")\n"]},"metadata":{},"sourceType":"module"}